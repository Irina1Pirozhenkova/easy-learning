package com.example.easy_learning.config;

import com.example.easy_learning.security.JwtTokenFilter;
import com.example.easy_learning.security.JwtTokenProvider;
import com.example.easy_learning.security.StudentJwtUserDetailsService;
import com.example.easy_learning.security.TutorJwtUserDetailsService;
import lombok.RequiredArgsConstructor;
import lombok.SneakyThrows;
import org.springframework.http.HttpMethod;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Lazy;
import org.springframework.http.HttpStatus;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
@EnableWebSecurity
@RequiredArgsConstructor(onConstructor = @__(@Lazy))
public class ApplicationConfig {

  private final JwtTokenProvider tokenProvider;
  private final ApplicationContext applicationContext;
  private final StudentJwtUserDetailsService studentJwtUserDetailsService;
  private final TutorJwtUserDetailsService tutorJwtUserDetailsService;

  // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω PasswordEncoder –¥–ª—è –æ–±–æ–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
  @Bean //–î–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª–µ–π
  public PasswordEncoder passwordEncoder() { // —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
    return new BCryptPasswordEncoder();
  }

  // –°–æ–∑–¥–∞—ë–º DaoAuthenticationProvider –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
  @Bean//–ü–æ–¥–∫–ª—é—á–∞–µ—Ç UserDetailsService –¥–ª—è –ª–æ–≥–∏–Ω–∞
  public DaoAuthenticationProvider studentDaoAuthenticationProvider() {
    DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
    provider.setUserDetailsService(studentJwtUserDetailsService);
    provider.setPasswordEncoder(passwordEncoder());
    return provider;
  }

  // –°–æ–∑–¥–∞—ë–º DaoAuthenticationProvider –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤
  @Bean//–ü–æ–¥–∫–ª—é—á–∞–µ—Ç UserDetailsService –¥–ª—è –ª–æ–≥–∏–Ω–∞
  public DaoAuthenticationProvider tutorDaoAuthenticationProvider() {
    DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
    provider.setUserDetailsService(tutorJwtUserDetailsService);
    provider.setPasswordEncoder(passwordEncoder());
    return provider;
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –≤ AuthenticationManager
  @Bean
  @SneakyThrows//–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å
  public AuthenticationManager authenticationManager(HttpSecurity http) {
    AuthenticationManagerBuilder authBuilder = http.getSharedObject(AuthenticationManagerBuilder.class);
    authBuilder.authenticationProvider(studentDaoAuthenticationProvider());
    authBuilder.authenticationProvider(tutorDaoAuthenticationProvider());
    return authBuilder.build();
  }

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  @Bean
  @SneakyThrows//–ì–ª–∞–≤–Ω–æ–µ: –≥–æ–≤–æ—Ä–∏—Ç, –∫—Ç–æ –∫—É–¥–∞ –º–æ–∂–µ—Ç, –∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç JwtTokenFilter
  public SecurityFilterChain filterChain(HttpSecurity httpSecurity) {
    httpSecurity
            .csrf(AbstractHttpConfigurer::disable)
            .cors(AbstractHttpConfigurer::disable)
            .httpBasic(AbstractHttpConfigurer::disable)
            .sessionManagement(sessionManagement ->
                    sessionManagement.sessionCreationPolicy(SessionCreationPolicy.STATELESS)
            )
            .exceptionHandling(configurer ->
                    configurer.authenticationEntryPoint( // –µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
                            (request, response, exception) -> {
                              response.setStatus(HttpStatus.UNAUTHORIZED.value()); // 401
                              response.getWriter().write("Unauthorized.");
                            }
                    ).accessDeniedHandler( // –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤
                            (request, response, exception) -> {
                              response.setStatus(HttpStatus.FORBIDDEN.value()); //403
                              response.getWriter().write("Unauthorized.");
                            }
                    )
            ) //Swagger –∏ OpenAPI ‚Äî –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî —Ç–æ–ª—å–∫–æ —Å –≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
            .authorizeHttpRequests(configurer ->
                    configurer
                            .requestMatchers("/api/v1/auth/**").permitAll()
                            .requestMatchers(HttpMethod.POST, "/api/tutors").permitAll() // üëà —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—å—é—Ç–æ—Ä–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
                            .requestMatchers("/swagger-ui/**").permitAll()
                            .requestMatchers("/v3/api-docs/**").permitAll()
                            .anyRequest().authenticated()
            )
            .anonymous(AbstractHttpConfigurer::disable) //–û—Ç–∫–ª—é—á–∞–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–π –¥–æ—Å—Ç—É–ø
            .addFilterBefore(new JwtTokenFilter(tokenProvider), UsernamePasswordAuthenticationFilter.class);
//–î–æ–±–∞–≤–ª—è–µ–º JWT-—Ñ–∏–ª—å—Ç—Ä
    return httpSecurity.build();
  }
}
